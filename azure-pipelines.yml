trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

steps:
# Paso 1: Restaurar dependencias
- task: UseDotNet@2
  displayName: 'Instalar .NET Core SDK'
  inputs:
    packageType: 'sdk'
    version: '8.x'
    installationPath: $(Agent.ToolsDirectory)/dotnet

- task: DotNetCoreCLI@2
  displayName: 'Restaurar dependencias'
  inputs:
    command: 'restore'
    projects: 'PruebaAzureFunctions/PruebaAzureFunctions.csproj'

# Paso 2: Publicar el proyecto
- task: DotNetCoreCLI@2
  displayName: 'Publicar el proyecto'
  inputs:
    command: 'publish'
    projects: 'PruebaAzureFunctions/PruebaAzureFunctions.csproj'
    arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/publish'
    publishWebProjects: false  # Desactivar la publicación de proyectos web (Azure Function no es un proyecto web típico)

# Paso intermedio: Listar el contenido de Build.ArtifactStagingDirectory y subcarpeta 'publish'
- script: |
    echo "Contenido de Build.ArtifactStagingDirectory:"
    ls -la "$(Build.ArtifactStagingDirectory)"
    echo "Contenido de Build.ArtifactStagingDirectory/publish:"
    ls -la "$(Build.ArtifactStagingDirectory)/publish"
  displayName: 'Listar contenido del directorio de artefactos y publish'



# Paso 4: Desplegar a Azure Functions
- task: AzureFunctionApp@1
  displayName: 'Desplegar a Azure Functions'
  inputs:
    azureSubscription: 'FunctionsAppDemo'
    appType: 'functionApp'
    appName: 'PruebaFunctionAppDemo'
    package: '$(Build.ArtifactStagingDirectory)/publish/PruebaAzureFunctions.zip'
    deploymentMethod: 'zipDeploy'

# Paso 5: Validación final (opcional)
- script: |
    echo "Validación completada. El despliegue se realizó correctamente."
  displayName: 'Mensaje de confirmación'
